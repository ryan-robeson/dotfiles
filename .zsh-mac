export DISABLE_AUTO_TITLE=true

export HOMEBREW_ROOT=/opt/boxen/homebrew # brew --prefix
export HOMEBREW_CACHE=/opt/boxen/cache/homebrew # brew --cache
export HOMEBREW_NO_INSTALL_CLEANUP=1 # handled in crontab
export HOMEBREW_AUTO_UPDATE_SECS=$((6 * 60 * 60)) # 6 hours

export CFLAGS="-I$HOMEBREW_ROOT/include"
export LDFLAGS="-L$HOMEBREW_ROOT/lib"

rr_path_prepend /usr/local/heroku/bin

# Add homebrew'd stuff to the path.
rr_path_prepend $HOMEBREW_ROOT/bin $HOMEBREW_ROOT/sbin

# Add homebrew'd stuff to the manpath.
rr_path_like_prepend MANPATH $HOMEBREW_ROOT/share/man

# Allow bundler to use all the cores for parallel installation
export BUNDLE_JOBS=4

# Make all the fancy `hub` shortcuts available via `git`.
alias git=hub

alias ql='qlmanage -p'
alias mcjpeg="$HOMEBREW_ROOT/opt/mozjpeg/bin/cjpeg"
alias mdjpeg="$HOMEBREW_ROOT/opt/mozjpeg/bin/djpeg"
alias mjpegtrans="$HOMEBREW_ROOT/opt/mozjpeg/bin/jpegtrans"

rr_activate_nodenv
rr_activate_rbenv

rr_path_append /usr/X11/bin /Library/Tex/texbin

# Add Adobe Font Development Tools to PATH
export FDK_EXE="$HOME/bin/FDK/Tools/osx"
rr_path_append $FDK_EXE

# Add binaries from `pip3 install --user ...` to the path.
rr_path_append $HOME/Library/Python/3.7/bin

export EDITOR=$HOMEBREW_ROOT/bin/vim

function view_applescript_interface_items_for {
  # Adapted from http://hints.macworld.com/article.php?story=20111208191312748
  # Useful for finding items that can be scripted with System Events in
  # AppleScript.
  osascript <<-eos | perl -pe '$_ =~ s/, /\n/g'
  set appname to "$1" -------------------------- Set this to the App you want to look at

  set winstuff to "defaultval"
  set menustuff to "defaultval"

  tell application appname
    activate
  end tell

  tell application "System Events"
    tell process appname
      set winstuff to entire contents of front window
      set menustuff to entire contents of menu bar 1
    end tell
  end tell
  return winstuff & menustuff -- comment this out to get just winstuff
  --return winstuff -- comment this out too to get just menustuff
  --return menustuff
eos
}

# Unlock the screen from the command line
# Adapted from: https://apple.stackexchange.com/a/230912
function unlock_screen {
  echo -n "Please enter your password: "
  read -s password
  osascript <<-eos
    tell application "System Events"
      key code 123 -- left arrow wakes the screen
      delay 0.8 -- wait for the login screen
      keystroke "$password" -- types the password
      key code 36 -- Enter - logs in
    end tell
eos
}

# Locking the screen is much easier from 10.13 onward.
# Remove this check and the extra code after upgrading.
if [[ ${$(sw_vers -productVersion)%\.[0-9]} -lt '10.13' ]] {
  # Lock the screen - Workaround since I haven't updated past Sierra yet
  # https://stackoverflow.com/a/41196453
  function lock_screen() {
    echo Locking screen please wait...
    PATH=/usr/bin:$PATH xcrun swift <<-eos >/dev/null 2>&1
    import Foundation

    CGEvent(mouseEventSource: nil, mouseType: .mouseMoved, mouseCursorPosition: CGPoint(x:30.0, y:0.0), mouseButton: .left)!.post(tap: CGEventTapLocation.cghidEventTap)
    CGEvent(mouseEventSource: nil, mouseType: .mouseMoved, mouseCursorPosition: CGPoint(x:0.0, y:0.0), mouseButton: .left)!.post(tap: CGEventTapLocation.cghidEventTap)
eos
  }
} else {
  # Lock the screen
  # https://apple.stackexchange.com/a/316058
  # Requires at least 10.13 (High Sierra)
  function lock_screen {
    osascript <<-eos
      activate application "SystemUIServer"
      tell application "System Events"
        tell process "SystemUIServer" to keystroke "q" using {command down, control down}
      end tell
eos
  }
}

# List Brew formula installed by user (installed_on_request)
function installed_on_request() {
  brew list | xargs brew info --json | ruby -r json -ne 'j = JSON.parse($_); o = j.reduce([]) { |a, v| a << v["name"] unless v["installed"][0]["installed_on_request"].nil?; a }; puts o.join("\n")'
}
