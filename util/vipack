#!/usr/bin/env ruby

# Manage vim plugins

require 'fileutils'
require 'find'
require 'open3'
require 'pathname'

# List of plugins.
# Supports GitHub style user/repo, full path, and local uncompressed repos.
# Assumes Git in most cases.
#
# Consider moving this to a file
#
# Examples:
#   ctrlpvim/ctrlp.vim
#   https://github.com/ryan-robeson/vim-plugin.git
#   https://github.com/ryan-robeson/vim-plugin
#   https://example.com/ryan-robeson/vim-plugin
#   http://example.com/ryan-robeson/vim-plugin.git
#   git://example.com/ryan-robeson/vim-plugin
#   ~/src/vim-plugin
PLUGINS = %w[
    airblade/vim-gitgutter
    ctrlpvim/ctrlp.vim
    kovisoft/slimv
    mattn/emmet-vim
    oranget/vim-csharp
    tpope/vim-fugitive
    tpope/vim-surround
    w0rp/ale
]

# Assume ~/.vim for now
# Note: Parsing vim --version is a potential option
VIM_DIRECTORY = (Pathname.new "~/.vim").expand_path
PACKAGE_DIR = VIM_DIRECTORY/"pack"/"vipack"/"start"

def spec_to_path(spec)
  path = nil
  type = nil

  case spec
  when /\.git$/
    type = :git
    path = spec
  when /^[[:word:]]+\/[^\/]+$/
    type = :github
    path = "https://github.com/#{spec}.git"
  when /github\.com/
    type = :github
    path = spec
  when /(?:https?:|git:)/
    # Assume git for http(s)
    type = :git
    path = spec
  else
    s = File.expand_path spec
    if Dir.exist? s
      type = :local
      path = Pathname.new s
    end
  end

  if type.nil?
    nil
  else
    { path: path, type: type }
  end
end

def install
  unless VIM_DIRECTORY.exist?
    $stderr.puts "Could not find #{VIM_DIRECTORY}. Something may be wrong. Please create it and try again."
    exit 1
  end

  unless PACKAGE_DIR.exist?
    $stderr.puts "Could not find #{PACKAGE_DIR}. Creating..."
    FileUtils.mkdir_p PACKAGE_DIR
  end

  $stderr.puts "Installing plugins"

  manage_plugins do |details|
    if details.nil?
      next [false, "Could not determine type of source"]
    end

    case details[:type]
    when :git, :github
      _, err, status = Open3.capture3("git", "clone", "-q", "--depth", "1", "--no-local", details[:path], chdir: PACKAGE_DIR)

      unless status.success?
        if err =~ /destination path .+ already exists and is not an empty directory/
          # The plugins directory already existing should not be considered an
          # error given that this command should be called whenever a new
          # plugin is added to the list.
          nil
        else
          # Something really did go wrong. On to the next one
          next [false, "Failed to clone #{details[:path]}.\n\t'#{err.chomp}'"]
        end
      end

    when :local
      # Assume an unpacked plugin dir
      if (PACKAGE_DIR/details[:path].basename).exist?
        # Don't copy over the existing directory
        nil
      else
        # Should be safe to copy everything over
        FileUtils.cp_r details[:path], PACKAGE_DIR
      end
    end # end case

    # Made it this far. Must not have been any issues
    next [true, nil]
  end
end

# Wraps plugin management with a half decent UI
# Takes a block
# Yields a Hash for each plugin
# => { path: "path", type: :type }
# Expects block to "return" an Array containing true or false depending on the
# success of changing the plugin and an optional error message.
def manage_plugins
  # Add some nice looking checkmarks all lined up
  max_plugin_name_length = 40 # Truncate to minimize wrapping on smaller terminals
  longest_plugin_name_length = [ PLUGINS.max_by(&:length).length, max_plugin_name_length ].min
  check = "\u2713".rjust(longest_plugin_name_length + 1, ' ').freeze

  PLUGINS.each do |plugin|
    details = spec_to_path(plugin)
    _check = check[[plugin.length, max_plugin_name_length].min - 1..-1]
    _fail = _check.dup[0..-2] + "\u274C"

    # Display current plugin (truncated as necessary)
    print "> #{plugin.length > max_plugin_name_length ? "#{plugin[0..max_plugin_name_length]}..." : plugin}"

    success, error_message = yield details

    if success === true
      puts _check
    else
      puts _fail
    end

    $stderr.puts error_message unless error_message.nil?
  end
end

def update
  puts "Updating plugins"

  manage_plugins do |details|
    if details.nil?
      next [false, "Could not determine type of source"]
    end

    plugin_dir = PACKAGE_DIR / guess_dir_name(details[:path], details[:type])

    if !Dir.exist? plugin_dir
      next [false, "#{plugin_dir} not found. Skipping update."]
    end

    case details[:type]
    when :git, :github
      # git pull -q --rebase
      out, status = Open3.capture2e("git", "pull", "-q", "--rebase", chdir: plugin_dir)

      unless status.success?
        next [false, "Update failed:\n\t#{out}"]
      end

    when :local
      update_required = false
      source_dir = details[:path]
      old_source_found = false
      old_sources = []

      Find.find(source_dir) do |file|
        # NOTE: This misses when files are only deleted from source_dir. Fine
        # for now
        if ! FileUtils.uptodate?(plugin_dir/file , [ source_dir/file ])
          update_required = true
          break
        end
      end

      if update_required
        # Going to move the plugin out of the way
        old_plugin = plugin_dir + '_'

        # In case there's already an old copy of the plugin hanging around
        while Dir.exist? old_plugin
          old_source_found = true
          old_sources << old_plugin

          old_plugin = old_plugin + '_'
        end

        FileUtils.mv plugin_dir, old_plugin

        # Copy the updated plugin into place
        FileUtils.cp_r source_dir, PACKAGE_DIR

        # Remove the backup copy
        FileUtils.rm_r old_plugin

        if old_source_found
          next [true, "Warning: Old plugin copies found. You may want to delete them -\n\t\t#{old_sources.join("\n\t\t")}"]
        end
      end
    end # end case

    next [true, nil]
  end
end

# Based on Git clone's guess_dir_name without support for bundles, bare repos,
# or pathless checkouts (e.g. git://user@servername:8088).
# https://github.com/git/git/blob/aa25c82427ae70aebf3b8f970f2afd54e9a2a8c6/builtin/clone.c#L208
#
# Examples:
#   "https://hello:world@example.com:8202/user/package.git"         => package
#   "https://hello:world@example.com:8202/user/\x09package /.git/ " => package
#   "https://example.com/user/dot@files.git"                        => dot@files
#   "git://hello:world@example.com:8202:test.git"                   => test
def guess_git_dir_name(repo)
  dir = repo

  # Removing leading and trailing whitespace
  dir.strip!
  # Remove trailing slashes
  dir.sub! /\/*$/, ''
  # Remove /.git
  dir.delete_suffix! '/.git'
  # Get the last component of the path.
  # Colons also count as path separators, so 'foo:bar.git' becomes 'bar'.
  dir.sub! /.+[:\/\\](.+)$/, '\1'
  # Remove .git
  dir.delete_suffix! '.git'
  # Change 'control' characters to spaces
  dir.chars.map { |c| c < "\x20" ? ' ' : c }
  # Condense multiple spaces into 1
  dir.gsub! /\s+/, ' '
  # Remove leading and trailing whitespace again
  dir.strip!

  dir
end

# Returns the expected output directory name based on the given source path and
# type.
def guess_dir_name(path, type)
  dir = nil

  case type
  when :git, :github
    dir = guess_git_dir_name path
  when :local
    dir = Pathname.new(path).basename
    if !Dir.exist? dir
      dir = nil
    end
  end

  dir
end

def help
  puts """Usage: #{$0} install|update

Manage Vim plugins.

  install	Install plugins
  update	Update installed plugins"""
  exit 1
end

if ARGV.length > 0
  case ARGV[0]
  when "install"
    install
  when "update"
    update
  else
    help
  end
end
